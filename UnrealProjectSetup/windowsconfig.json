{
  "~Project_Name~": {
    "build.bat": "@echo off\nREM Set the path to the Unreal Engine build batch file\nSET UNREAL_BUILD_BAT=\"~Engine-Path~\\Engine\\Build\\BatchFiles\\Build.bat\"\nREM Set project-specific variables\nSET TARGET=~Project_Name~Editor\nSET PLATFORM=Win64\nSET CONFIGURATION=Development\nSET UPROJECT_PATH=\"~Project_Path~\\~Project_Name~\\~Project_Name~.uproject\"\nREM Run the Unreal Build Tool with the provided parameters\n%UNREAL_BUILD_BAT% %TARGET% %PLATFORM% %CONFIGURATION% %UPROJECT_PATH%",
    "run.bat": "@echo off\nSET UNREAL_EDITOR_EXEC=\"~Engine-Path~\\Engine\\Binaries\\Win64\\UnrealEditor.exe\"\nSET UPROJECT_PATH=\"~Project_Path~\\~Project_Name~\\~Project_Name~.uproject\"\nSET MODE=%1\n\nIF /I \"%MODE%\" == \"editor\" (\n    %UNREAL_EDITOR_EXEC% %UPROJECT_PATH% -log\n) ELSE IF /I \"%MODE%\" == \"game\" (\n    %UNREAL_EDITOR_EXEC% %UPROJECT_PATH% -game -log -windowed -resx=1200 -resy=720\n) ELSE IF /I \"%MODE%\" == \"standalone\" (\n    REM For standalone on Windows, cooking is usually done through the editor or UAT.\n    REM This is a placeholder, adapt as needed for command-line cooking on Windows.\n    ECHO Standalone mode (cooking) on Windows is typically done via UAT or the editor.\n    REM Example: ~Engine-Path~\\Engine\\Build\\BatchFiles\\RunUAT.bat BuildCookRun -project=%UPROJECT_PATH% -platform=Win64 -clientconfig=Development -cook -stage -archive -pak\n) ELSE (\n    ECHO Invalid mode selected.\n)",
    "~Project_Name~.uproject": "{ \n    \"FileVersion\": 3,\n    \"EngineAssociation\": \"\",\n    \"Category\": \"\",\n    \"Description\": \"\",\n    \"Modules\": [\n        {\n            \"Name\": \"~Project_Name~Core\",\n            \"Type\": \"Runtime\",\n            \"LoadingPhase\": \"Default\",\n            \"AdditionalDependencies\": [\n                \"Engine\"\n            ]\n        }\n    ],\n\"Plugins\":[\n] \n }  \n",
    "Source": {
      "~Project_Name~Core": {
        "Public": {
          "~Project_Name~Core.h": "#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"Modules/ModuleInterface.h\"\n\nclass F~Project_Name~Core : public IModuleInterface\n{\npublic:\n    static inline F~Project_Name~Core& Get()\n    {\n        return FModuleManager::LoadModuleChecked<F~Project_Name~Core>(\"~Project_Name~Core\");\n    }\n\n    static inline bool IsAvailable()\n    {\n        return FModuleManager::Get().IsModuleLoaded(\"~Project_Name~Core\");\n    }\n\n    virtual void StartupModule() override;\n    virtual void ShutdownModule() override;\n};"
        },
        "Private": {
          "~Project_Name~Core.cpp": "#include \"~Project_Name~Core.h\"\n#include \"Modules/ModuleManager.h\"\n#include \"Log.h\"\nvoid F~Project_Name~Core::StartupModule()\n{\n    UE_LOG(Log~Project_Name~Core, Log, TEXT(\"~Project_Name~Core module starting up\"));\n}\n\nvoid F~Project_Name~Core::ShutdownModule()\n{\n    UE_LOG(Log~Project_Name~Core, Log, TEXT(\"~Project_Name~Core module shutting down\"));\n}\nIMPLEMENT_PRIMARY_GAME_MODULE(F~Project_Name~Core, ~Project_Name~Core, \"~Project_Name~Core\");",
          "Log.cpp": "#include \"Log.h\"\n\nDEFINE_LOG_CATEGORY(Log~Project_Name~Core);",
          "Log.h": "#pragma once\n\n#include \"Logging/LogMacros.h\"\n\nDECLARE_LOG_CATEGORY_EXTERN(Log~Project_Name~Core, Log, All);"
        },
        "~Project_Name~Core.Build.cs": "// Copyright Epic Games, Inc. All Rights Reserved.\n\nusing UnrealBuildTool;\n\npublic class ~Project_Name~Core : ModuleRules\n{\npublic ~Project_Name~Core(ReadOnlyTargetRules Target) : base(Target)\n    {\n        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\n        PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\" });\n\n        PrivateDependencyModuleNames.AddRange(new string[] { });\n    }\n}"
      },
      "~Project_Name~Editor.Target.cs": "// Copyright Epic Games, Inc. All Rights Reserved.\nusing UnrealBuildTool;\nusing System.Collections.Generic;\npublic class ~Project_Name~EditorTarget : TargetRules\n{\n\n  public ~Project_Name~EditorTarget(TargetInfo Target) : base(Target) \n{\nType = TargetType.Editor;\nDefaultBuildSettings = BuildSettingsVersion.V4;\nIncludeOrderVersion = EngineIncludeOrderVersion.Unreal5_3;\nExtraModuleNames.Add(\"~Project_Name~Core\");\n }\n}",
      "~Project_Name~.Target.cs": "// Copyright Epic Games, Inc. All Rights Reserved.\n\nusing UnrealBuildTool;\nusing System.Collections.Generic;\n\npublic class ~Project_Name~Target : TargetRules\n{\n    public ~Project_Name~Target(TargetInfo Target) : base(Target)\n    {\n        Type = TargetType.Game;\n        DefaultBuildSettings = BuildSettingsVersion.V4;\n    IncludeOrderVersion = EngineIncludeOrderVersion.Unreal5_3;\n    ExtraModuleNames.Add(\"~Project_Name~Core\");\n    }\n}"
    }
  }
}
